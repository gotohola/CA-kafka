docker compose -f stage-compose/03_broker.yml down -v --remove-orphans
docker volume rm stage-compose_broker-auth || true
docker compose -f stage-compose/02_intermediate.yml down -v --remove-orphans
docker compose -f stage-compose/02_intermediate.yml up -d
docker run --rm -v stage-compose_broker-auth:/data alpine ls -l /data
docker compose -f stage-compose/03_broker.yml up -d --build
docker compose -f stage-compose/03_broker.yml logs -f kafka
docker compose -f stage-compose/04_client.yml up -d --build
docker exec -it kafka-client bash


echo | openssl s_client -connect kafka:9093 -CAfile /client/ca.crt -servername kafka \
        -cert /client/client.crt -key /client/client.key -quiet

||||||Mensajes y creacion de topicos||||||||

#Crear offset topic#
kafka-topics.sh --bootstrap-server srv1.broker.kafka:9093 \
  --command-config /client/client.properties \
  --create --topic __consumer_offsets \
  --replication-factor 1 \
  --partitions 1 \
  --config cleanup.policy=compact

#Creacion de un topico#
kafka-topics.sh --bootstrap-server srv1.broker.kafka:9093 \
  --command-config /client/client.properties \
  --create --if-not-exists \
  --topic mi-topic \
  --replication-factor 1 \
  --partitions 1

#Publicacion mensaje#
echo "mensaje_$(date +%s)" | kafka-console-producer.sh \
  --bootstrap-server srv1.broker.kafka:9093 \
  --producer.config /client/client.properties \
  --topic mi-topic \
  --producer-property acks=all \
  --producer-property linger.ms=0 \
  --producer-property batch.size=1

#Lectura mensaje#
kafka-console-consumer.sh \
  --bootstrap-server srv1.broker.kafka:9093 \
  --consumer.config /client/client.properties \
  --topic mi-topic \
  --partition 0 \
  --offset 0 \
  --property print.timestamp=true
